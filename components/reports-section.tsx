"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { FileText, Download, Calendar, Clock, Plus } from "lucide-react"
import { useState } from "react"
import { useDashboard } from "@/lib/dashboard-context"
import { Skeleton } from "@/components/ui/skeleton"

interface NewReportForm {
  title: string
  description: string
  type: string
}

export function ReportsSection() {
  const { state, addReport } = useDashboard()
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [newReport, setNewReport] = useState<NewReportForm>({
    title: "",
    description: "",
    type: "PDF",
  })
  const [formErrors, setFormErrors] = useState<Partial<NewReportForm>>({})
  const [isGenerating, setIsGenerating] = useState<number | null>(null)

  const validateForm = (): boolean => {
    const errors: Partial<NewReportForm> = {}

    if (!newReport.title.trim()) {
      errors.title = "Report title is required"
    }

    if (newReport.title.length > 100) {
      errors.title = "Title must be less than 100 characters"
    }

    if (newReport.description.length > 500) {
      errors.description = "Description must be less than 500 characters"
    }

    setFormErrors(errors)
    return Object.keys(errors).length === 0
  }

  const handleCreateReport = async () => {
    if (!validateForm()) {
      return
    }

    try {
      const report = {
        title: newReport.title.trim(),
        description: newReport.description.trim() || "Custom generated report",
        status: "processing" as const,
        lastGenerated: new Date().toISOString().split("T")[0],
        size: "0 MB",
        type: newReport.type,
      }

      addReport(report)
      setNewReport({ title: "", description: "", type: "PDF" })
      setFormErrors({})
      setIsDialogOpen(false)

      // Show success message
      alert(`Report "${report.title}" has been created and is now processing.`)
    } catch (error) {
      alert("Failed to create report. Please try again.")
    }
  }

  const getStatusBadge = (status: string) => {
    const variants = {
      completed: "default",
      processing: "secondary",
      scheduled: "outline",
    } as const

    return <Badge variant={variants[status as keyof typeof variants]}>{status}</Badge>
  }

  const handleDownload = (reportTitle: string, status: string, reportId: number) => {
    if (status !== "completed") {
      alert("Report is not ready for download yet.")
      return
    }

    // Create a comprehensive report file for download
    const content = `${reportTitle}
Generated on: ${new Date().toLocaleDateString()}
Report ID: ${reportId}

EXECUTIVE SUMMARY
================
This report provides comprehensive insights into your business metrics and performance indicators.

KEY METRICS
===========
- Total Users: ${state.baseData.users.length}
- Active Users: ${state.baseData.users.filter((u) => u.status === "active").length}
- Total Revenue: $${state.baseData.users.reduce((sum, u) => sum + u.revenue, 0).toLocaleString()}

DETAILED ANALYSIS
================
This section would contain detailed charts, graphs, and analysis based on your current data filters and selections.

For a complete interactive experience, please use the dashboard interface.

Generated by ADmyBRAND Insights Dashboard
Â© ${new Date().getFullYear()} ADmyBRAND. All rights reserved.`

    const blob = new Blob([content], { type: "text/plain" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${reportTitle.toLowerCase().replace(/\s+/g, "-")}-${new Date().toISOString().split("T")[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    window.URL.revokeObjectURL(url)
  }

  const handleGenerate = async (reportTitle: string, reportId: number) => {
    setIsGenerating(reportId)

    try {
      // Simulate report generation process
      await new Promise((resolve) => setTimeout(resolve, 3000))

      alert(`${reportTitle} has been regenerated successfully!`)
    } catch (error) {
      alert(`Failed to regenerate ${reportTitle}. Please try again.`)
    } finally {
      setIsGenerating(null)
    }
  }

  const handleInputChange = (field: keyof NewReportForm, value: string) => {
    setNewReport((prev) => ({ ...prev, [field]: value }))
    // Clear error when user starts typing
    if (formErrors[field]) {
      setFormErrors((prev) => ({ ...prev, [field]: undefined }))
    }
  }

  const handleDialogClose = () => {
    setIsDialogOpen(false)
    setNewReport({ title: "", description: "", type: "PDF" })
    setFormErrors({})
  }

  if (state.isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <Skeleton className="h-6 w-40" />
            <Skeleton className="h-4 w-64 mt-2" />
          </div>
          <Skeleton className="h-9 w-36" />
        </div>
        <div className="grid gap-4 md:grid-cols-2">
          {Array.from({ length: 4 }).map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div className="space-y-2">
                    <Skeleton className="h-6 w-48" />
                    <Skeleton className="h-4 w-64" />
                  </div>
                  <Skeleton className="h-5 w-20" />
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Skeleton className="h-4 w-24" />
                    <Skeleton className="h-4 w-20" />
                  </div>
                  <div className="flex gap-2">
                    <Skeleton className="h-8 flex-1" />
                    <Skeleton className="h-8 flex-1" />
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Reports Header */}
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-semibold">Available Reports</h3>
          <p className="text-sm text-muted-foreground">Generate and download comprehensive business reports</p>
        </div>
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button className="transition-all duration-200 hover:scale-105">
              <Plus className="h-4 w-4 mr-2" />
              Create New Report
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Create New Report</DialogTitle>
              <DialogDescription>Generate a custom report based on your current data and filters.</DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="title">Report Title *</Label>
                <Input
                  id="title"
                  placeholder="Enter report title..."
                  value={newReport.title}
                  onChange={(e) => handleInputChange("title", e.target.value)}
                  className={`transition-all duration-200 focus:ring-2 ${formErrors.title ? "border-red-500" : ""}`}
                  maxLength={100}
                />
                {formErrors.title && <p className="text-sm text-red-500">{formErrors.title}</p>}
                <p className="text-xs text-muted-foreground">{newReport.title.length}/100 characters</p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Description (Optional)</Label>
                <Textarea
                  id="description"
                  placeholder="Enter report description..."
                  value={newReport.description}
                  onChange={(e) => handleInputChange("description", e.target.value)}
                  className={`transition-all duration-200 focus:ring-2 resize-none ${formErrors.description ? "border-red-500" : ""}`}
                  rows={3}
                  maxLength={500}
                />
                {formErrors.description && <p className="text-sm text-red-500">{formErrors.description}</p>}
                <p className="text-xs text-muted-foreground">{newReport.description.length}/500 characters</p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="type">Report Type</Label>
                <Select value={newReport.type} onValueChange={(value) => handleInputChange("type", value)}>
                  <SelectTrigger className="transition-all duration-200 focus:ring-2">
                    <SelectValue placeholder="Select report type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="PDF">PDF Document</SelectItem>
                    <SelectItem value="Excel">Excel Spreadsheet</SelectItem>
                    <SelectItem value="CSV">CSV Data File</SelectItem>
                    <SelectItem value="JSON">JSON Data Export</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={handleDialogClose}
                className="transition-all duration-200 hover:scale-105 bg-transparent"
              >
                Cancel
              </Button>
              <Button
                type="button"
                onClick={handleCreateReport}
                className="transition-all duration-200 hover:scale-105"
                disabled={!newReport.title.trim()}
              >
                <FileText className="h-4 w-4 mr-2" />
                Create Report
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Reports Grid */}
      <div className="grid gap-4 md:grid-cols-2">
        {state.baseData.reports.map((report, index) => (
          <Card
            key={report.id}
            className="transition-all duration-300 hover:shadow-lg animate-in fade-in slide-in-from-bottom-4"
            style={{ animationDelay: `${index * 100}ms` }}
          >
            <CardHeader>
              <div className="flex justify-between items-start">
                <div className="space-y-1">
                  <CardTitle className="text-lg">{report.title}</CardTitle>
                  <CardDescription>{report.description}</CardDescription>
                </div>
                {getStatusBadge(report.status)}
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between text-sm text-muted-foreground">
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4" />
                    <span>{new Date(report.lastGenerated).toLocaleDateString()}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    <span>
                      {report.type} â¢ {report.size}
                    </span>
                  </div>
                </div>

                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleDownload(report.title, report.status, report.id)}
                    disabled={report.status !== "completed"}
                    className="flex-1 transition-all duration-200 hover:scale-105 disabled:hover:scale-100"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleGenerate(report.title, report.id)}
                    disabled={isGenerating === report.id}
                    className="flex-1 transition-all duration-200 hover:scale-105 disabled:hover:scale-100"
                  >
                    <Clock className={`h-4 w-4 mr-2 ${isGenerating === report.id ? "animate-spin" : ""}`} />
                    {isGenerating === report.id ? "Generating..." : "Regenerate"}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}
